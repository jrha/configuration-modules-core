use strict;
use warnings;

BEGIN {
    *CORE::GLOBAL::sleep = sub {};
}

use Test::More;
use Test::Quattor qw(nmstate_advance);
use Test::MockModule;
use Readonly;

use NCM::Component::nmstate;
my $mock = Test::MockModule->new('NCM::Component::nmstate');
my %executables;
$mock->mock('_is_executable', sub {diag "executables $_[1] ",explain \%executables;return $executables{$_[1]};});

my $cfg = get_config_for_profile('nmstate_advance');
my $cmp = NCM::Component::nmstate->new('network');

Readonly my $ETH0_YML => <<EOF;
# File generated by NCM::Component::nmstate. Do not edit
---
interfaces:
- ipv4:
    address:
    - ip: 4.3.2.1
      prefix-length: 24
    dhcp: false
    enabled: true
  mac-address: 6e:a5:1b:55:77:0a
  name: eth0
  profile-name: eth0
  state: up
  type: ethernet
route-rules:
  config:
  - family: ipv4
    ip-to: 1.2.3.4/24
    priority: 100
    route-table: '4'
  - route-table: '4'
    state: absent
routes:
  config:
  - next-hop-interface: eth0
    state: absent
  - destination: 0.0.0.0/0
    next-hop-address: 4.3.2.254
    next-hop-interface: eth0
  - destination: 1.2.3.4/32
    next-hop-interface: eth0
  - destination: 1.2.3.5/24
    next-hop-interface: eth0
  - destination: 1.2.3.6/8
    next-hop-address: 4.3.2.1
    next-hop-interface: eth0
  - destination: 1.2.3.7/32
    next-hop-address: 4.3.2.2
    next-hop-interface: eth0
  - destination: 0.0.0.0/0
    next-hop-address: 4.3.2.3
    next-hop-interface: eth0
    table-id: '3'
  - cwnd: 100
    destination: 0.0.0.0/0
    initcwnd: 50
    initrwnd: 40
    next-hop-address: 4.3.2.3
    next-hop-interface: eth0
    table-id: '3'
EOF

Readonly my $VLAN_YML => <<EOF;
# File generated by NCM::Component::nmstate. Do not edit
---
interfaces:
- ipv4:
    address:
    - ip: 4.3.2.1
      prefix-length: 24
    dhcp: false
    enabled: true
  name: eth0.123
  profile-name: eth0.123
  state: up
  type: vlan
  vlan:
    base-iface: eth0
    id: '123'
routes:
  config:
  - next-hop-interface: eth0.123
    state: absent
  - destination: 0.0.0.0/0
    next-hop-address: 4.3.2.254
    next-hop-interface: eth0.123
  - destination: 1.2.3.4/32
    next-hop-interface: eth0.123
EOF

Readonly my $VLAN0_YML => <<EOF;
# File generated by NCM::Component::nmstate. Do not edit
---
interfaces:
- ipv4:
    address:
    - ip: 4.3.2.1
      prefix-length: 24
    dhcp: false
    enabled: true
  name: vlan0
  profile-name: vlan0
  state: up
  type: vlan
  vlan:
    base-iface: eth0
    id: '123'
routes:
  config:
  - next-hop-interface: vlan0
    state: absent
  - destination: 0.0.0.0/0
    next-hop-address: 4.3.2.254
    next-hop-interface: vlan0
  - destination: 1.2.3.4/32
    next-hop-interface: vlan0
EOF


Readonly my $VLAN1_123_YML => <<EOF;
# File generated by NCM::Component::nmstate. Do not edit
---
interfaces:
- ipv4:
    address:
    - ip: 4.3.2.1
      prefix-length: 24
    dhcp: false
    enabled: true
  name: vlan1.123
  profile-name: vlan1.123
  state: up
  type: vlan
  vlan:
    base-iface: eth0
    id: '123'
routes:
  config:
  - next-hop-interface: vlan1.123
    state: absent
  - destination: 0.0.0.0/0
    next-hop-address: 4.3.2.254
    next-hop-interface: vlan1.123
  - destination: 1.2.3.4/32
    next-hop-interface: vlan1.123
EOF


Readonly my $VLAN_456_YML => <<EOF;
# File generated by NCM::Component::nmstate. Do not edit
---
interfaces:
- ipv4:
    address:
    - ip: 4.3.2.1
      prefix-length: 24
    dhcp: false
    enabled: true
  name: vlan.456
  profile-name: vlan.456
  state: up
  type: vlan
  vlan:
    base-iface: eth0
    id: '456'
routes:
  config:
  - next-hop-interface: vlan.456
    state: absent
  - destination: 0.0.0.0/0
    next-hop-address: 4.3.2.254
    next-hop-interface: vlan.456
  - destination: 1.2.3.4/32
    next-hop-interface: vlan.456
EOF


Readonly my $DHCP_YML => <<EOF;
# File generated by NCM::Component::nmstate. Do not edit
---
interfaces:
- ipv4:
    dhcp: true
    enabled: true
  mac-address: 6e:a5:1b:55:77:0b
  name: eth1
  profile-name: eth1
  state: up
  type: ethernet
routes:
  config:
  - next-hop-interface: eth1
    state: absent
EOF

Readonly my $BOND_YML => <<EOF;
# File generated by NCM::Component::nmstate. Do not edit
---
interfaces:
- ipv4:
    address:
    - ip: 4.3.2.1
      prefix-length: 24
    dhcp: false
    enabled: true
  link-aggregation:
    port:
    - eth2
    - eth3
  name: bond0
  profile-name: bond0
  state: up
  type: bond
routes:
  config:
  - next-hop-interface: bond0
    state: absent
  - destination: 0.0.0.0/0
    next-hop-address: 4.3.2.254
    next-hop-interface: bond0
EOF

Readonly my $DUMMY_YML => <<EOF;
# File generated by NCM::Component::nmstate. Do not edit
---
interfaces:
- ipv4:
    address:
    - ip: 4.3.2.10
      prefix-length: 32
    enabled: true
  name: dummy_myvip
  profile-name: dummy_myvip
  state: up
  type: dummy
EOF

Readonly my $ALIAS_YML => <<EOF;
# File generated by NCM::Component::nmstate. Do not edit
---
interfaces:
- ipv4:
    address:
    - ip: 4.3.2.11
      prefix-length: 24
    - ip: 4.3.2.12
      prefix-length: 24
    dhcp: false
    enabled: true
  mac-address: 6e:a5:1b:55:77:0e
  name: eth4
  profile-name: eth4
  state: up
  type: ethernet
routes:
  config:
  - next-hop-interface: eth4
    state: absent
  - destination: 0.0.0.0/0
    next-hop-address: 4.3.2.254
    next-hop-interface: eth4
EOF

Readonly my $IB_YML => <<EOF;
# File generated by NCM::Component::nmstate. Do not edit
---
interfaces:
- infiniband:
    mode: datagram
    pkey: 0xffff
  ipv4:
    address:
    - ip: 10.11.12.13
      prefix-length: 24
    dhcp: false
    enabled: true
  name: ib0
  profile-name: ib0
  state: up
  type: infiniband
routes:
  config:
  - next-hop-interface: ib0
    state: absent
EOF

Readonly my $IBPKEY_YML => <<EOF;
# File generated by NCM::Component::nmstate. Do not edit
---
interfaces:
- infiniband:
    base-iface: ib1
    mode: datagram
    pkey: 0x3039
  ipv4:
    address:
    - ip: 10.11.15.13
      prefix-length: 24
    dhcp: false
    enabled: true
  name: ib1.12345
  profile-name: ib1.12345
  state: up
  type: infiniband
routes:
  config:
  - next-hop-interface: ib1.12345
    state: absent
EOF

Readonly my $OVS_BRIDGE_YML => <<EOF;
# File generated by NCM::Component::nmstate. Do not edit
---
interfaces:
- bridge:
    port:
    - name: bond1
    - name: eth1000
    - name: br100
  name: br100
  profile-name: br100
  state: up
  type: ovs-bridge
- ipv4:
    enabled: false
  ipv6:
    enabled: false
  name: br100
  profile-name: br100
  state: up
  type: ovs-interface
routes:
  config:
  - next-hop-interface: br100
    state: absent
EOF

Readonly my $OVS_INTPORT_YML => <<EOF;
# File generated by NCM::Component::nmstate. Do not edit
---
interfaces:
- ipv4:
    address:
    - ip: 4.3.2.1
      prefix-length: 24
    dhcp: false
    enabled: true
  name: eth1000
  profile-name: eth1000
  state: up
  type: ovs-interface
routes:
  config:
  - next-hop-interface: eth1000
    state: absent
  - destination: 0.0.0.0/0
    next-hop-address: 4.3.2.254
    next-hop-interface: eth1000
EOF

Readonly my $RT => <<EOF;
#
# reserved values
#
255	local
254	main
253	default
0	unspec
#
# local
#
#1	inr.ruhep
EOF

Readonly my $RT_NEW => <<EOF;
#
# reserved values
#
255	local
254	main
253	default
0	unspec
#
# local
#
#1	inr.ruhep
3 outside # managed by Quattor
4 space # managed by Quattor
EOF

# File must exist, set with correct content
set_file_contents("/etc/iproute2/rt_tables", $RT);

is($cmp->Configure($cfg), 1, "Component runs correctly with a test profile");

is(get_file_contents("/etc/iproute2/rt_tables"), $RT_NEW, "Exact routing table");

my $eth0yml = get_file_contents("/etc/nmstate/eth0.yml");
is($eth0yml, $ETH0_YML, "Exact eth0 route yml config");

my $dhcpyml = get_file_contents("/etc/nmstate/eth1.yml");
is($dhcpyml, $DHCP_YML, "Exact eth1 dhcp yml config");

my $bondyml = get_file_contents("/etc/nmstate/bond0.yml");
is($bondyml, $BOND_YML, "Exact bond0 yml config");

my $vlanyml = get_file_contents("/etc/nmstate/eth0.123.yml");
is($vlanyml, $VLAN_YML, "Exact eth0.123 vlan yml config");

my $vlanyml2 = get_file_contents("/etc/nmstate/vlan0.yml");
is($vlanyml2, $VLAN0_YML, "Exact vlan0 yml config");

my $vlanyml3 = get_file_contents("/etc/nmstate/vlan1.123.yml");
is($vlanyml3, $VLAN1_123_YML, "Exact vlan1.123 yml config");

my $vlanyml4 = get_file_contents("/etc/nmstate/vlan.456.yml");
is($vlanyml4, $VLAN_456_YML, "Exact vlan.456 yml config");

my $ibyml = get_file_contents("/etc/nmstate/ib0.yml");
is($ibyml, $IB_YML, "Exact ib0 yml config");

my $ibpkyml = get_file_contents("/etc/nmstate/ib1.12345.yml");
is($ibpkyml, $IBPKEY_YML, "Exact ib1 pkey yml config");

my $dummy_yml = get_file_contents("/etc/nmstate/dummy_myvip.yml");
is($dummy_yml, $DUMMY_YML, "Exact dummy interface yml config");

my $alias_yml = get_file_contents("/etc/nmstate/eth4.yml");
is($alias_yml, $ALIAS_YML, "Exact alias interface yml config");

my $ovsbryml = get_file_contents("/etc/nmstate/br100.yml");
is($ovsbryml, $OVS_BRIDGE_YML, "Exact br100 yml config");

my $ovsintyml = get_file_contents("/etc/nmstate/eth1000.yml");
is($ovsintyml, $OVS_INTPORT_YML, "Exact eth1000 yml config");


diag "all history commands ", explain \@Test::Quattor::command_history;

# apply commands are sorted alphabetically, bond last
ok(command_history_ok([
  '/usr/bin/nmstatectl apply /etc/nmstate/dummy_myvip.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/eth0.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/eth0.123.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/eth1.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/eth2.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/eth3.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/eth4.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/ib0.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/ib1.12345.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/vlan.456.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/vlan0.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/vlan1.123.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/bond0.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/bond1.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/eth1000.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/br100.yml',
  '/usr/bin/nmstatectl apply /etc/nmstate/eth1000.yml',  # reapplied
  '/usr/bin/nmstatectl apply /etc/nmstate/resolv.yml',
], []));


done_testing();
