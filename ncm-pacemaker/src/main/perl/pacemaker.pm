# ${license-info}
# ${developer-info}
# ${author-info}

#######################################################################
#
# pacemaker component
#
# configure linux-ha settings and resources using pacemaker tools
# REWRITES /etc/ha.d/{ha.cf,authkeys} 
# Uses CRM for ha service configuration
# Code is based in ncm-linuxha
#
# Stijn De Weirdt
# 11/11/2009
#
# TODO:	
#
#######################################################################

package NCM::Component::pacemaker;

#
# a few standard statements, mandatory for all components
#

use strict;
use NCM::Component;
use vars qw(@ISA $EC);
@ISA = qw(NCM::Component);
$EC=LC::Exception::Context->new->will_store_all;

use NCM::Check;
use LC::Process;
use LC::File;
use Socket; # for IP gethostbyname() of cluster members 

#
# damn exceptions. Damn OO perl, for that matter. Why OO for 200 lines of code?
#
$EC->error_handler(\&my_handler);
sub my_handler {
    my($ec, $e) = @_;
    $e->has_been_reported(1);
}

##########################################################################
sub Configure {
##########################################################################
    our ($self,$config)=@_;
    our $timeout = 600;

    my $valPath = '/software/components/pacemaker';

    unless ($config->elementExists($valPath)) {
    	$self->error("cannot get pacemaker path: $valPath");
    	return;
    }

    #my $cnt = 0;
    my $re; # root element (of subtrees in our config)
    my $ce; # current processed config element
    my $val; # value (temporary) retrieved for a given config element
    my @node_list; # list of nodes in this cluster (by hostname)

    my $reload=0; # shall we reload the config file?

    ###############################################################
    ## HA
    ###############################################################

    my $haPath = '/software/components/pacemaker/ha';

    unless ($config->elementExists($haPath)) {
        $self->error("cannot get HA path: $haPath");
        return;
    }

    #### ha.cf ####

    my $old_hacf=LC::File::file_contents("/etc/ha.d/ha.cf");
    if (not $old_hacf) { $old_hacf=" "; }

    my $hacf="###\n### NCM-autogenerated ###\n### Do not edit, run ncm-ncd --co pacemaker \n###\n"; 

    # get the mandatory constants. Most of these need to be defined upfront in the
    # config file (eg. udpport before communication details)
    #
    foreach $ce ( qw(
    		use_logd
    		keepalive
    		deadtime
    		warntime
    		initdead
    		udpport
            crm
    ) ) {
    	unless ($config->elementExists($haPath."/".$ce)) {
    		$self->error("mandatory config element $ce not found!");
    		return;
    	}
    	$val=$config->getValue($haPath."/".$ce);
    	$hacf.="$ce $val\n";
    }

    #
    # now process optional elements
    #
    foreach $ce ( qw(
            baud
            ping
            respawn
            serial
            watchdog
            logfacility
            auto_failback
    ) ) {
        if ($config->elementExists($haPath."/".$ce)) {
            $val=$config->getValue($haPath."/".$ce);
            $hacf.="$ce $val\n";
        }
    }

    # iterate over nodes. Right now there should be exactly two nodes.
    # however, implementing it as a list prepares for the future.
    #
    # also creates @node_list for reference later in unicast comms (below)
    #
    unless ($config->elementExists($haPath."/nodes")) {
    	$self->error("mandatory config element $re not found!");
    	return;
    }
    $re=$config->getElement($haPath."/nodes");
    while ($re->hasNextElement()) {
    	$ce=$re->getNextElement();
    	$val=$ce->getValue();
    	$hacf.="node $val\n";
    	push(@node_list,$val);
    }

    # set up communication between the nodes. there are two cases
    # enabled, namely, 'bcast' and 'ucast'. There can by >=2 of these.
    #
    $re=$config->getElement($haPath."/communication");
    while ($re->hasNextElement()) {
    	$ce=$re->getNextElement();
    	my $method=$ce->getValue();	# communication method (ucast, bcast,...)
    	$ce=$re->getNextElement();
    	my $interface=$ce->getValue();	# network interface name
    	#
    	my $nodename;	# member of the peer list in the cluster
    	my $nodeip;	# IP address for $nodename
    	#
    	# the easy case: broadcast link (private interface, right?)
    	#
    	if ($method eq "bcast") {
    		$hacf.="bcast $interface\n";
    	#
    	# unicast link: need to figure out IP addresses..
    	# unicasts going to the local node are ignored, so it's safe to have
    	# the same config file on all cluster members.
    	#
    	} elsif ($method eq "ucast") {
    		foreach $nodename (@node_list) {
    			$nodeip=inet_ntoa(scalar(gethostbyname($nodename)));
    			$hacf.="ucast $interface $nodeip\n";
    		}
    	#
    	# any other: save it for later (Fibre Channel, serial...)
    	#
    	} else {
    		$self->error("unsupported (by ncm-pacemaker) communication method '$method'");
    		return;
    	}
    }

    #### authkeys #### 

    my $old_authkeys=LC::File::file_contents("/etc/ha.d/authkeys");
    if (not $old_authkeys) { $old_authkeys=" "; }
    my $authkeys="###\n### NCM-autogenerated\n### Do not edit, run ncm-ncd --co pacemaker \n###\nauth 1\n1 ";
    
    #
    # give the communication's preshared key to all cluster members
    # 
    unless ($config->elementExists($haPath."/authkey")) {
    	$self->error("mandatory config element $ce not found!");
    	return;
    }
    $val=$config->getValue($haPath."/authkey");
    $authkeys.=$val."\n";
    
    #### No haresources: this is done with pacemaker CRM  ####

    #
    # if there's nothing to do, return without writing the files and
    # without reloading
    #

    ## changes the nodes before modifying the ha.cf file and restarting heartbeat
    return if(modifyHAnodes(\@node_list));
    
    if (	($old_hacf ne $hacf) ||
    	($old_authkeys ne $authkeys) 
    ) {
        unless (LC::File::file_contents("/etc/ha.d/ha.cf",$hacf)) {
        	$self->error("Can't write /etc/ha.d/ha.cf");
    	   return;
        }
        unless (LC::File::file_contents("/etc/ha.d/authkeys",$authkeys)) {
    	   $self->error("Can't write /etc/ha.d/authkeys");
    	   return;
        }
        chmod(0600,'/etc/ha.d/authkeys');
        
        ## does a reload start heartbeat?
        unless (LC::Process::run('/sbin/service heartbeat reload') && ($? == 0)) {
        	$self->error('command "/sbin/service heartbeat reload" failed');
    	   return;
        }
    }
    
    ##
    ## so, let's assume heartbeat runs at this point   
    ## if not, we can't use the crm interface
    
    ## make the crm txt
    my ($crm,$crmpath,$crmname);
    
    ## nodes are not yet part of the crm!
    ## they should be set through ha.cf and other cmds
    ## in case of persisten trouble:
    ## - on all nodes: stop heartbeat, wipe /var/lib/heartbeat/crm
    ## - start heartbeat on all nodes and wait a few minutes
    ## - run ncm-pacemaker on one node and wait
    ## --> if node issues persist: try "crm configure nodes erase" and repeat steps
    
    my $crms = $config->getElement("$valPath/crm")->getTree;
    
    ## resources
    $crmname="resources";
    if (exists(${%$crms}{$crmname})) {
        $crm.="##\n## $crmname\n##\n";
        foreach my $c ( qw(primitive monitor group clone master) ) {
            if (exists(${%$crms}{$crmname}{$c})) {
                foreach my $val (@{${%$crms}{$crmname}{$c}}) {
                    $crm.="$c $val\n";
                }
            }
        }
        $crm.="## end $crmname\n\n";
    }

    ## constraints
    $crmname="constraints";
    if (exists(${%$crms}{$crmname})) {
        $crm.="##\n## $crmname\n##\n";
        foreach my $c ( qw(location colocation order) ) {
            if (exists(${%$crms}{$crmname}{$c})) {
                foreach my $val (@{${%$crms}{$crmname}{$c}}) {
                    $crm.="$c $val\n";
                }
            }
        }
        $crm.="## end $crmname\n\n";
    }
    

    ## attributes
    $crmname="attributes";
    if (exists(${%$crms}{$crmname})) {
        $crm.="##\n## $crmname\n##\n";
        foreach my $c ( qw(property rsc_defaults op_defaults) ) {
            if (exists(${%$crms}{$crmname}{$c})) {
                foreach my $val (@{${%$crms}{$crmname}{$c}}) {
                    $crm.="$c $val\n";
                }
            }
        }
        $crm.="## end $crmname\n\n";
    }
    
    
    my $finalcrm="## generated by ncm-pacemaker\n";
    $finalcrm .= "configure\ncib new tmp --force\nerase\n";
    $finalcrm .= "\n$crm\n";
    $finalcrm .= "\ncommit\ncommit force\ncd\ncib\ncommit tmp\nuse live\ndelete tmp\nquit\n\n";
    ## write the crm file? not necessary, but why not
    my $crmloc='/etc/ha.d/crm.ncm-pacemaker';
    unless (LC::File::file_contents($crmloc,$finalcrm)) {
        $self->error("Can't write $crmloc");
        return;
    }
    ### execute the crm commands
    my $out;
    if (LC::Process::execute(['/usr/sbin/crm'],
                            "timeout" => $timeout,
                           "stdout" => \$out,
                           "stderr" => "stdout",
                           "stdin" => $finalcrm
    ) && ($? == 0) ) {
        ## always add output. 
        $self->info("CRM applied. (CRM file in $crmloc,output\n$out)");
    } else {
        $self->info("Applying CRM failed. CRM file in $crmloc; output\n$out");
    }
        
    ## verify the live config
    if (LC::Process::execute(['/usr/sbin/crm_verify','-L','-V'],
                            "timeout" => $timeout,
                           "stdout" => \$out,
                           "stderr" => "stdout",
                           "stdin" => $finalcrm
    ) && ($? == 0) ) {
        $self->info("CRM verified. All ok.");
    } else {
        $self->info("CRM verify failed. Output: $out");
    }


    ################
    ## Component code ends here, subs only now
    ################

    ## begin modifyHAnodes
    sub modifyHAnodes {
        my ($nref)=@_;

        my @thenodes=@{$nref};
    
        ## path to hb_add and hb_delete tools 
        my $hbpath = "/usr/share/heartbeat";
        if ($config->elementExists("/software/components/pacemaker/ha/hb_path")) {
            $hbpath = $config->getValue("/software/components/pacemaker/ha/hb_path") ;
        }

        ## the following exectuables should exist
        my $hbadd="$hbpath/hb_addnode";
        my $hbdel="$hbpath/hb_delnode";
        my $clstatus = "/usr/bin/cl_status";
        foreach my $cmd (($hbadd,$hbdel,$clstatus)) {
            if (! -x $cmd) {
                $self->error("modifyHAnodes: Couldn't find command $cmd.");
                return 1;
            }
        }

        ## 
        ## Check HA nodes and add/delete nodes from cluster according to the specified nodes   
        ##   
        ## /usr/bin/cl_status listnodes returns list of nodes known to cluster
        ## returns exitcode > 0 if heartbeat is not running 
        my $nout;
        if (LC::Process::execute([$clstatus, 'listnodes'],
                            "timeout" => $timeout,
                            "stdout" => \$nout,
                            "stderr" => "stdout" ) && ($? == 0) 
        ) {
            my @foundnodes=split('\n',$nout);
            foreach my $n (@foundnodes) {
                ## if node $n is not in thenodes, delete it
                my ($index) = grep {$thenodes[$_] eq $n} 0..$#thenodes;
                if (! defined($index)) {
                    if (LC::Process::execute([$hbdel, $n],
                            "timeout" => $timeout,
                            "stdout" => \$nout,
                            "stderr" => "stdout" ) && ($? == 0) 
                    ) {
                        $self->info("modifyHAnodes: Removed node $n from HAcluster.");
                    } else {
                        $self->warn("modifyHAnodes: Removing node $n from HAcluster filed. Command used: \"$hbdel $n\"; output: $nout.");
                    }
                }
            }
            foreach my $n (@thenodes) {
                ## if node $n is not in foundnodes, add it
                my ($index) = grep {$foundnodes[$_] eq $n} 0..$#foundnodes;
                if (! defined($index)) {
                    if (LC::Process::execute([$hbadd, $n],
                            "timeout" => $timeout,
                            "stdout" => \$nout,
                            "stderr" => "stdout" ) && ($? == 0) 
                    ) {
                        $self->info("modifyHAnodes: Added node $n to HAcluster.");
                    } else {
                        $self->warn("modifyHAnodes: Adding node $n to HAcluster filed. Command used: \"$hbadd $n\"; output: $nout.");
                    }
                }
            }
        } else {
            ## No heartbeat running?
            ## should we start it and add the nodes?
            ## lets hope that heartbeat sets the nodes as defined in the /etc/ha.d/ha.cf file   
            ## btw, we can't start heartbeat at this point, because it's not garanteed that the ha.cf file even exists yet
        }
    
        return 0;
    
    }
    ### End modifyHAnodes


    return;

}

##########################################################################
sub Unconfigure {
##########################################################################
}


1; #required for Perl modules
